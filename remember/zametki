npm устанавливается вместе с nodejs
проверяется версия командой npm -v
устанавливается проект командой npm install -g live-server (чтобы приложение обновлялось в реальном времени)
ВАЖНО для многих команд нужны права администратора, так что используй cmd а не powershell
(Sets в javascript)
Sets - множество - совокупность каких-либо объектов
В JavaScript, Sets (множества) являются встроенной структурой данных, которая представляет собой коллекцию уникальных значений любого типа. Они похожи на массивы, но в отличие от массивов, Sets не допускают дублирования элементов. 
 
Вы можете создать новый Set с помощью конструктора  Set() . Например:
let mySet = new Set();
Затем вы можете добавить элементы в Set с помощью метода  add() , удалить элементы с помощью метода  delete() , проверить наличие элемента с помощью метода  has()  и получить количество элементов с помощью свойства  size . Например:
mySet.add(1);
mySet.add(2);
mySet.add(3);

console.log(mySet.size); // Вывод: 3

mySet.delete(2);
console.log(mySet.has(2)); // Вывод: false

Sets также поддерживает итерацию с помощью цикла  for...of . Например:
for (let item of mySet) {
    console.log(item);
  }
  Sets в JavaScript также предоставляют методы для выполнения операций над множествами, таких как объединение, пересечение и разность. Например, метод  union()  объединяет два множества, метод  intersection()  находит пересечение двух множеств, а метод  difference()  находит разность двух множеств.
  
  Sets в JavaScript очень полезны, когда вам нужно хранить уникальные значения или проверять наличие элементов в коллекции без дублирования.  











(Map в javascript)
Map (карта) в JavaScript - это встроенная структура данных, которая представляет собой коллекцию пар "ключ-значение". В отличие от объектов, где ключами могут быть только строки или символы, в Map ключами могут быть любые типы данных, включая объекты и функции. 
 
Вы можете создать новый Map с помощью конструктора  Map() . Например:
let myMap = new Map();
Затем вы можете добавлять элементы в Map с помощью метода  set() , получать значения по ключу с помощью метода  get() , проверять наличие ключа с помощью метода  has()  и удалять элементы с помощью метода  delete() . Например:
myMap.set("key1", "value1");
myMap.set("key2", "value2");

console.log(myMap.get("key1")); // Вывод: "value1"
console.log(myMap.has("key2")); // Вывод: true

myMap.delete("key1");
console.log(myMap.has("key1")); // Вывод: false
Map также поддерживает итерацию с помощью цикла  for...of . Например:
for (let [key, value] of myMap) {
    console.log(key, value);
  }
  Map в JavaScript сохраняет порядок добавления элементов, что означает, что элементы будут возвращаться в том же порядке, в котором они были добавлены. Это отличает Map от объектов, где порядок свойств не гарантирован. 
 
  Map также предоставляет методы для получения количества элементов ( size ), очистки Map ( clear ) и итерации по ключам ( keys ), значениям ( values ) или парам ключ-значение ( entries ). 
   
  Map в JavaScript очень полезен, когда вам нужно хранить пары "ключ-значение" и обращаться к ним по ключу.  